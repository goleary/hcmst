lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
#ladder_m2 * B1SOPTIM +
num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
ladder_m2 * B1SESTEE +
#ladder_m2 * B1SOPTIM +
num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
ladder_m2 * B1SPWBA2 +
#ladder_m2 * B1SOPTIM +
num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
ladder_m2 * B1SPWBE2 +
#ladder_m2 * B1SOPTIM +
num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
ladder_m2 * B1SPWBG2 +
#ladder_m2 * B1SOPTIM +
num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
ladder_m2 * B1SPWBR2 +
#ladder_m2 * B1SOPTIM +
num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
ladder_m2 * B1SPWBR2 +
#ladder_m2 * B1SOPTIM +
#num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
lm1 <-
lm(
negaf_m2 ~
ladder_m2 * er_reap_all_saq_m2 +
ladder_m2 * B1SPWBE2 +
#ladder_m2 * B1SOPTIM +
#num_chronic_m2 +
age +
sex +
income_adj_m2 +
education_m2 +
tsei_m2,
# ms_m2 +
# cancer_m2 +
# heart_m2 +
#race_cat,
data = midus_mort
)
lm.beta::lm.beta(lm1)
summary(lm1)
cor.test(midus$er_reap_all_saq_m2, midus$B1SPWBE2)
cor.test(midus$er_reap_all_saq_m2, midus$B1SESTEE)
## Load Packages ##
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
tidyverse,
psych,
broom,
xgboost,
caret
)
## Load Data ##
load("G:/My Drive/research/projects/hcmst/data/ICPSR_30103/DS0001/30103-0001-Data.rda")
df <- da30103.0001
df <-
df %>%
mutate(
marital_status0 = as.integer(PPMARIT) - 1,
marital_status1 = as.integer(PPMARIT),
income = as.numeric(HHINC),
age_bin = as.numeric(PPAGECT4),
education = as.numeric(PPEDUC),
met_online = as.integer(Q24_MET_ONLINE) - 1
)
df_simple <-
df %>%
dplyr::select(
PPMARIT,
marital_status0,
marital_status1,
income,
education,
age_bin
)
marit <- df_simple$PPMARIT
# choose indices for training and testing datasets
set.seed(1989)
n <-
nrow(df)
training_indices <-
sample(n, floor(0.75 * n))
# select training data
training_data <-
df_simple[training_indices, ]
training_label <-
training_data %>%
dplyr::select(marital_status0) %>%
as.matrix()
training_data <-
training_data %>%
dplyr::select(
income,
education,
age_bin
) %>%
as.matrix()
testing_data <-
df_simple[-training_indices, ]
testing_label <-
testing_data %>%
dplyr::select(marital_status0) %>%
as.matrix()
testing_data <-
testing_data %>%
dplyr::select(
income,
education,
age_bin
) %>%
as.matrix()
xgb.train <-
xgb.DMatrix(
data = training_data,
label = training_label
)
xgb.test <-
xgb.DMatrix(
data = testing_data,
label = testing_label
)
#
num_class = length(levels(df$PPMARIT))
params = list(
booster="gbtree",
eta=0.001,
max_depth=5,
gamma=3,
subsample=0.75,
colsample_bytree=1,
objective="multi:softprob",
eval_metric="mlogloss",
num_class=num_class
)
# Train the XGBoost classifer
xgb.fit=xgb.train(
params=params,
data=xgb.train,
nrounds=1000,
nthreads=1,
early_stopping_rounds=10,
watchlist=list(val1=xgb.train,val2=xgb.test),
verbose=0
)
# Review the final model and results
xgb.fit
# Predict outcomes with the test data
xgb.pred = predict(xgb.fit,testing_data,reshape=T)
xgb.pred = as.data.frame(xgb.pred)
colnames(xgb.pred) = levels(marit)
# Use the predicted label with the highest probability
xgb.pred$prediction = apply(xgb.pred,1,function(x) colnames(xgb.pred)[which.max(x)])
xgb.pred$label = levels(marit)[testing_label+1]
# Calculate the final accuracy
result = sum(xgb.pred$prediction==xgb.pred$label)/nrow(xgb.pred)
print(paste("Final Accuracy =",sprintf("%1.2f%%", 100*result)))
xgb.importance(colnames(training_data), model = xgb.fit)
xgb.pred
save(xgb.fit, file = "api/model.RData")
save(xgb.fit, file = "G:/My Drive/research/projects/hcmst/data/api/model.RData")
install.packages("plumber")
colnames(xgb.pred)
function(income, education, age_bin){
load('model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
mutate(across(income:age_bin, as.numeric))
test <-
data.frame(matrix(test, ncol = 3))
colnames(test) <-
c("income", "education", "age_bin")
predict(model, test)
}
marital_status_predict <- function(income, education, age_bin){
load('model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
mutate(across(income:age_bin, as.numeric))
test <-
data.frame(matrix(test, ncol = 3))
colnames(test) <-
c("income", "education", "age_bin")
predict(model, test)
}
df_simple
marital_status_predict(22250, 12, 3)
load('model.RData')
load('./model.RData')
pwd
getwd()
setwd("C:/Users/djole/projects/hcmst/r")
load('./model.RData')
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
mutate(across(income:age_bin, as.numeric))
test <-
data.frame(matrix(test, ncol = 3))
colnames(test) <-
c("income", "education", "age_bin")
predict(model, test)
}
marital_status_predict(22250, 12, 3)
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
test <-
data.frame(matrix(test, ncol = 3))
colnames(test) <-
c("income", "education", "age_bin")
predict(model, test)
}
marital_status_predict(22250, 12, 3)
marital_status_predict("22250", "12", "3")
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
# test <-
#   data.frame(matrix(test, ncol = 3))
#
# colnames(test) <-
#   c("income", "education", "age_bin")
#
# predict(model, test)
}
marital_status_predict("22250", "12", "3")
test <-
test %>%
as.data.frame()
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
as.data.frame()
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
colnames(test) <-
c("income", "education", "age_bin")
predict(model, test)
}
marital_status_predict("22250", "12", "3")
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
as.data.frame()
# test <-
#   test %>%
#   mutate_at(vars(income:age_bin), as.numeric)
colnames(test) <-
c("income", "education", "age_bin")
# predict(model, test)
}
marital_status_predict("22250", "12", "3")
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
as.data.frame()
colnames(test) <-
c("income", "education", "age_bin")
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
predict(model, test)
}
marital_status_predict("22250", "12", "3")
c("22250", "12", "3")
test <- c("22250", "12", "3")
test <-
test %>%
as.data.frame()
test
test <-
test %>%
t() %>%
as.data.frame()
colnames(test) <-
c("income", "education", "age_bin")
test
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
predict(model, test)
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
t() %>%
as.data.frame()
colnames(test) <-
c("income", "education", "age_bin")
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
predict(model, test)
}
marital_status_predict("22250", "12", "3")
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
t() %>%
as.data.frame()
colnames(test) <-
c("income", "education", "age_bin")
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
predict(xgb.fit, test)
}
marital_status_predict("22250", "12", "3")
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
t() %>%
as.data.frame()
colnames(test) <-
c("income", "education", "age_bin")
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
test <-
as.matrix(test)
predict(xgb.fit, test)
}
marital_status_predict("22250", "12", "3")
marit <- df_simple$PPMARIT
marit
df_simple$education
df$education
df$PPEDUC
df$PPAGECT4
marital_status_predict("22250", "12", "3")
levels(df_simple$PPMARIT)
marital_status_predict("122250", "12", "3")
root <- pr("plumber.R")
pacman::p_load(
tidyverse,
broom,
xgboost,
caret,
plumber
)
marital_status_predict <- function(income, education, age_bin){
load('./model.RData')
test <-
c(income, education, age_bin)
test <-
test %>%
t() %>%
as.data.frame()
colnames(test) <-
c("income", "education", "age_bin")
test <-
test %>%
mutate_at(vars(income:age_bin), as.numeric)
test <-
as.matrix(test)
predict(xgb.fit, test)
}
marital_status_predict("122250", "12", "3")
root <- pr("plumber.R")
root
root %>% pr_run()
